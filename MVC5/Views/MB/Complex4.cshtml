@model IEnumerable<MVC5.Models.SimpleViewModel>

@{
    ViewBag.Title = "Complex4";
}
@*  因為要想辦法把表單的欄位名稱弄出 item[i].欄位名稱，因此宣告一個item把原本的model轉成陣列
    把原本的item.欄位名稱改成item[i].欄位名稱
*@

@{ 
    var item = Model.ToArray();
}
<h2>Complex4</h2>
@*將原本List變成表單需補上表單的語法*@
@*NameFor可察看browser欄位id*@
@*匿名物件 - CS$<>8__locals1 *@
@*使用nuget移除Microsoft.CodeDom.Providers.DotNetCompilerPlatform套件*@
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    <table class="table">
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.UserName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Password)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ConfirmPassword)
            </th>

        </tr>
        
    @for (int i = 0; i < item.Length; i++)
    {
        <tr>
            <td>
                @Html.EditorFor(modelitem => item[i].UserName)
                @Html.ValidationMessageFor(modelitem => item[i].UserName, "", new { @class = "text-danger" })

            </td>
            <td>
                @Html.EditorFor(modelitem => item[i].Password)
                @Html.ValidationMessageFor(modelitem => item[i].Password, "", new { @class = "text-danger" })

            </td>
            <td>
                @Html.EditorFor(modelitem => item[i].ConfirmPassword)
                @Html.ValidationMessageFor(modelitem => item[i].ConfirmPassword, "", new { @class = "text-danger" })
            </td>

        </tr>
    }

    </table>
@*補上表單送出按鈕*@
<div class="form-group">
    <div class="col-md-offset-2 col-md-10">
        <input type="submit" value="Update" class="btn btn-default" />
    </div>
</div>

}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}



